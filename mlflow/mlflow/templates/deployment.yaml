{{- $artifactCommandPrefix := "default-artifact-root" }}
{{- $artifactCommand := printf "--%s=./mlruns" $artifactCommandPrefix }}

{{- if .Values.artifactRoot.proxiedArtifactStorage }}
  {{- $artifactCommandPrefix = "artifacts-destination" }}
  {{- $artifactCommand = printf "--%s=./mlartifacts" $artifactCommandPrefix }}
{{- end }}

{{- if .Values.artifactRoot.azureBlob.enabled }}
  {{- $artifactCommand = printf "--%s=wasbs://%s@%s.blob.core.windows.net/%s" $artifactCommandPrefix .Values.artifactRoot.azureBlob.container .Values.artifactRoot.azureBlob.storageAccount .Values.artifactRoot.azureBlob.path }}
{{- else if .Values.artifactRoot.s3.enabled }}
  {{- $artifactCommand = printf "--%s=s3://%s/%s" $artifactCommandPrefix .Values.artifactRoot.s3.bucket .Values.artifactRoot.s3.path }}
{{- else if .Values.artifactRoot.gcs.enabled }}
  {{- $artifactCommand = printf "--%s=gs://%s/%s" $artifactCommandPrefix .Values.artifactRoot.gcs.bucket .Values.artifactRoot.gcs.path }}
{{- end }}

{{- $dbConnectionDriver := "" }}
{{- if and (or .Values.backendStore.postgres.enabled .Values.postgresql.enabled) .Values.backendStore.postgres.driver }}
  {{- $dbConnectionDriver = printf "+%s" .Values.backendStore.postgres.driver }}
{{- else if and (or .Values.backendStore.mysql.enabled .Values.mysql.enabled) .Values.backendStore.mysql.driver }}
  {{- $dbConnectionDriver = printf "+%s" .Values.backendStore.mysql.driver }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mlflow.fullname" . }}
  labels:
    {{- include "mlflow.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "mlflow.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mlflow.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mlflow.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- if or (and (or .Values.backendStore.postgres.enabled .Values.backendStore.mysql.enabled .Values.postgresql.enabled .Values.mysql.enabled) (or .Values.backendStore.databaseConnectionCheck .Values.backendStore.databaseMigration) ) .Values.initContainers }}
      initContainers:
    {{- end }}
      {{- if and (or .Values.backendStore.postgres.enabled .Values.backendStore.mysql.enabled .Values.postgresql.enabled .Values.mysql.enabled) .Values.backendStore.databaseConnectionCheck }}
        - name: dbchecker
          image: "busybox:1.32"
          imagePullPolicy: IfNotPresent
          command: [ "/script/dbchecker.sh" ]
        {{- if or .Values.postgresql.enabled .Values.mysql.enabled .Values.backendStore.existingDatabaseSecret.name }}
          env:
        {{- end }}
          {{- if .Values.postgresql.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ (include "mlflow.postgresql.fullname" .) }}
              {{- if .Values.postgresql.auth.username }}
                  key: password
              {{- else }}
                  key: postgres-password
              {{- end }}
                  optional: true
          {{- end }}
          {{- if .Values.mysql.enabled }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ (include "mlflow.mysql.fullname" .) }}
              {{- if .Values.mysql.auth.username }}
                  key: password
              {{- else }}
                  key: mysql-root-password
              {{- end }}
                  optional: true
          {{- end }}
          {{- if .Values.backendStore.existingDatabaseSecret.name }}
            {{- if .Values.backendStore.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.passwordKey }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.usernameKey }}
            {{- end }}
            {{- if .Values.backendStore.mysql.enabled }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.passwordKey }}
            - name: MYSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.usernameKey }}
            {{- end }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "mlflow.fullname" . }}-env-configmap
          volumeMounts:
            - name: dbchecker
              mountPath: /script/dbchecker.sh
              subPath: dbchecker.sh
      {{- end }}
      {{- if and (or .Values.backendStore.postgres.enabled .Values.backendStore.mysql.enabled .Values.postgresql.enabled .Values.mysql.enabled) .Values.backendStore.databaseMigration }}
        - name: "mlflow-db-migration"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if or .Values.postgresql.enabled .Values.mysql.enabled .Values.backendStore.existingDatabaseSecret.name }}
          env:
        {{- end }}
          {{- if .Values.postgresql.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ (include "mlflow.postgresql.fullname" .) }}
              {{- if .Values.postgresql.auth.username }}
                  key: password
              {{- else }}
                  key: postgres-password
              {{- end }}
                  optional: true
          {{- end }}
          {{- if .Values.mysql.enabled }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ (include "mlflow.mysql.fullname" .) }}
              {{- if .Values.mysql.auth.username }}
                  key: password
              {{- else }}
                  key: mysql-root-password
              {{- end }}
                  optional: true
          {{- end }}
          {{- if .Values.backendStore.existingDatabaseSecret.name }}
            {{- if .Values.backendStore.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.passwordKey }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.usernameKey }}
            {{- end }}
            {{- if .Values.backendStore.mysql.enabled }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.passwordKey }}
            - name: MYSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.usernameKey }}
            {{- end }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "mlflow.fullname" . }}-env-configmap
            - secretRef:
                name: {{ template "mlflow.fullname" . }}-env-secret
            - secretRef:
                name: {{ template "mlflow.fullname" . }}-flask-server-secret-key
          command: ["python"]
          args:
            - /opt/mlflow/migrations.py
          volumeMounts:
            - name: migrations-config
              mountPath: /opt/mlflow/migrations.py
              subPath: migrations.py
              readOnly: true
      {{- end }}
      {{- with .Values.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["mlflow"]
          args:
            - server
            - --host=0.0.0.0
            - --port={{ .Values.service.port }}
          {{- if or .Values.backendStore.postgres.enabled .Values.postgresql.enabled }}
            - --backend-store-uri=postgresql{{ $dbConnectionDriver }}://
          {{- else if or .Values.backendStore.mysql.enabled .Values.mysql.enabled }}
            - --backend-store-uri=mysql{{ $dbConnectionDriver }}://$(MYSQL_USERNAME):$(MYSQL_PWD)@$(MYSQL_HOST):$(MYSQL_TCP_PORT)/$(MYSQL_DATABASE)
          {{- else }}
            - "--backend-store-uri=sqlite:///:memory:"
          {{- end }}
            - {{ $artifactCommand }}
          {{- if .Values.artifactRoot.proxiedArtifactStorage }}
            - --serve-artifacts
          {{- end }}
          {{- if .Values.serviceMonitor.enabled }}
            - --expose-prometheus=/mlflow/metrics
          {{- end }}
          {{- if .Values.auth.enabled }}
            - --app-name={{ .Values.auth.appName }}
          {{- else if .Values.ldapAuth.enabled }}
            - --app-name=basic-auth
          {{- end }}
          {{- range $key, $value := .Values.extraArgs }}
            - --{{ kebabcase $key }}={{ $value }}
          {{- end }}
          {{- range .Values.extraFlags }}
            - --{{ kebabcase . }}
          {{- end }}
          ports:
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ include "mlflow.health" . }}
              port: {{ .Values.service.name }}
          {{- with .Values.livenessProbe }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: {{ include "mlflow.health" . }}
              port: {{ .Values.service.name }}
          {{- with .Values.readinessProbe }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: MLFLOW_VERSION
              value: {{ .Values.image.tag | default .Chart.AppVersion | quote }}
          {{- if .Values.auth.enabled }}
            - name: MLFLOW_AUTH_CONFIG_PATH
              value: {{ printf "%s/%s" (.Values.auth.configPath | trimSuffix "/") (default "basic_auth.ini" (.Values.auth.configFile | trimPrefix "/")) }}
          {{- else if .Values.ldapAuth.enabled }}
            - name: MLFLOW_AUTH_CONFIG_PATH
              value: "/etc/mlflow/auth/ldap_basic_auth.ini"
            {{- if or .Values.ldapAuth.encodedTrustedCACertificate .Values.ldapAuth.externalSecretForTrustedCACertificate }}
            - name: LDAP_CA
              value: "/certs/ca.crt"
            {{- end }}
          {{- end }}
          {{- if .Values.postgresql.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ (include "mlflow.postgresql.fullname" .) }}
              {{- if .Values.postgresql.auth.username }}
                  key: password
              {{- else }}
                  key: postgres-password
              {{- end }}
                  optional: true
          {{- end }}
          {{- if .Values.mysql.enabled }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ (include "mlflow.mysql.fullname" .) }}
              {{- if .Values.mysql.auth.username }}
                  key: password
              {{- else }}
                  key: mysql-root-password
              {{- end }}
                  optional: true
          {{- end }}
          {{- if .Values.backendStore.existingDatabaseSecret.name }}
            {{- if .Values.backendStore.postgres.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.passwordKey }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.usernameKey }}
            {{- end }}
            {{- if .Values.backendStore.mysql.enabled }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.passwordKey }}
            - name: MYSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backendStore.existingDatabaseSecret.name }}
                  key: {{ .Values.backendStore.existingDatabaseSecret.usernameKey }}
            {{- end }}
          {{- end }}
          {{- range $key, $value := .Values.extraEnvVars }}
            - name: {{ upper $key }}
              value: {{ $value | quote }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "mlflow.fullname" . }}-env-configmap
            - secretRef:
                name: {{ template "mlflow.fullname" . }}-env-secret
            - secretRef:
                name: {{ template "mlflow.fullname" . }}-flask-server-secret-key
          {{- range .Values.extraSecretNamesForEnvFrom }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          {{- if or .Values.extraVolumeMounts .Values.auth.enabled .Values.ldapAuth.enabled }}
          volumeMounts:
            {{- if .Values.auth.enabled }}
            - name: auth-config-secret
              mountPath: {{ .Values.auth.configPath | trimSuffix "/" | quote }}
              readOnly: true
            {{- else if .Values.ldapAuth.enabled }}
            - name: auth-config-secret
              mountPath: "/etc/mlflow/auth"
              readOnly: true
              {{- if or .Values.ldapAuth.encodedTrustedCACertificate .Values.ldapAuth.externalSecretForTrustedCACertificate }}
            - name: trusted-ca-cert-secret
              mountPath: /certs/ca.crt
              subPath: ca.crt
              readOnly: true
              {{- end }}
            {{- end }}
          {{- with .Values.extraVolumeMounts }}
            {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
      {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or (and (or .Values.backendStore.postgres.enabled .Values.backendStore.mysql.enabled .Values.postgresql.enabled .Values.mysql.enabled) (or .Values.backendStore.databaseConnectionCheck .Values.backendStore.databaseMigration) ) .Values.extraVolumes .Values.auth.enabled .Values.ldapAuth.enabled }}
      volumes:
        {{- if and (or .Values.backendStore.postgres.enabled .Values.backendStore.mysql.enabled .Values.postgresql.enabled .Values.mysql.enabled) .Values.backendStore.databaseConnectionCheck }}
        - name: dbchecker
          configMap:
            name: {{ template "mlflow.fullname" . }}-dbchecker
            defaultMode: 0777
        {{- end }}
        {{- if and (or .Values.backendStore.postgres.enabled .Values.backendStore.mysql.enabled .Values.postgresql.enabled .Values.mysql.enabled) .Values.backendStore.databaseMigration }}
        - name: migrations-config
          configMap:
            name: {{ template "mlflow.fullname" . }}-migrations
        {{- end }}
        {{- if or .Values.auth.enabled .Values.ldapAuth.enabled }}
        - name: auth-config-secret
          secret:
            secretName: {{ template "mlflow.fullname" . }}-auth-config-secret
          {{- if or .Values.ldapAuth.encodedTrustedCACertificate .Values.ldapAuth.externalSecretForTrustedCACertificate }}
        - name: trusted-ca-cert-secret
          secret:
            secretName: {{ default (printf "%s-trusted-ca-cert-secret" (include "mlflow.fullname" .)) .Values.ldapAuth.externalSecretForTrustedCACertificate }}
          {{- end }}
        {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
